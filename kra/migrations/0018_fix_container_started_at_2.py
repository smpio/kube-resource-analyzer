# Generated by Django 3.2.2 on 2021-05-30 21:50

from django.db import migrations
from django.db.models import Min
from django.utils import timezone


def fix_started_at(apps, schema_editor):
    Container = apps.get_model('kra', 'Container')
    ResourceUsage = apps.get_model('kra', 'ResourceUsage')

    containers = Container.objects.in_bulk(field_name='id')

    resource_usage_qs = ResourceUsage.objects\
        .values('container_id')\
        .annotate(
            first_measured_at=Min('measured_at'),
        )
    for ru_group in resource_usage_qs:
        c = containers[ru_group['container_id']]
        if ru_group['first_measured_at'] < c.started_at:
            print(f'Creating fake container from {c.id} ({c.name})')
            new_c = Container()
            new_c.pod_id = c.pod_id
            new_c.name = c.name
            new_c.runtime_id = c.runtime_id + '_'
            new_c.started_at = ru_group['first_measured_at'] - timezone.timedelta(seconds=30)
            new_c.memory_limit_mi = c.memory_limit_mi
            new_c.cpu_request_m = c.cpu_request_m
            new_c.save()
            c.resourceusage_set.filter(measured_at__lt=c.started_at).update(container=new_c)
            c.oomevent_set.filter(happened_at__lt=c.started_at).update(container=new_c)


class Migration(migrations.Migration):

    dependencies = [
        ('kra', '0017_instance_summary_all_stats'),
    ]

    operations = [
        migrations.RunPython(fix_started_at, migrations.RunPython.noop),
    ]
